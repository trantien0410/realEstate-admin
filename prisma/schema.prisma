// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  amenities  Amenities[] @relation("StoreToAmenities")
  products   Product[]   @relation("StoreToProduct")
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String?
  videoUrl   String?
  categories Category[]
  createdAt  DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  stores    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([storeId])
}

model Amenities {
  id            String    @id @default(uuid())
  storeId       String
  stores        Store     @relation("StoreToAmenities", fields: [storeId], references: [id])
  roomName      String
  roomValue     Int
  bathroomName  String
  bathroomValue Int
  products      Product[]
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String    @id @default(uuid())
  storeId    String
  stores     Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean   @default(false)
  isArchived Boolean   @default(false)
  sizeId     String
  size       Size      @relation(fields: [sizeId], references: [id])
  colorId    String
  amenities  Amenities @relation(fields: [colorId], references: [id])
  images     Image[]
  videos     Video[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Video {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
